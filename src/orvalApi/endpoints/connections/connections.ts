/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateConnection200,
  CreateConnectionRequest,
  GetChatUsers200,
  GetConnectionByConversation200,
  GetConnectionStats200,
  GetConversations200,
  GetMessages200,
  GetMyConnections200,
  GetOlderMessages200,
  GetOlderMessagesParams,
  MarkAsReadRequest,
  MarkMessagesAsRead200,
  SendMessage200,
  SendMessageRequest
} from "../../model";

import { customInstance } from "../../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getConnections = () => {
  /**
   * Create a connection between client and freelancer when project is assigned
   */
  const createConnection = (
    createConnectionRequest: CreateConnectionRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<CreateConnection200>(
      {
        url: `/connections`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createConnectionRequest
      },
      options
    );
  };
  /**
   * Get connection details by conversation ID
   */
  const getConnectionByConversation = (
    conversationId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetConnectionByConversation200>(
      { url: `/connections/conversation/${conversationId}`, method: "GET" },
      options
    );
  };
  /**
   * Send a direct message
   */
  const sendMessage = (
    sendMessageRequest: SendMessageRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SendMessage200>(
      {
        url: `/connections/messages`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: sendMessageRequest
      },
      options
    );
  };
  /**
   * Get messages for a conversation
   */
  const getMessages = (
    conversationId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetMessages200>(
      { url: `/connections/messages/${conversationId}`, method: "GET" },
      options
    );
  };
  /**
   * Mark messages as read
   */
  const markMessagesAsRead = (
    markAsReadRequest: MarkAsReadRequest,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<MarkMessagesAsRead200>(
      {
        url: `/connections/messages/mark-read`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: markAsReadRequest
      },
      options
    );
  };
  /**
   * Get all conversations for the authenticated user
   */
  const getConversations = (
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetConversations200>(
      { url: `/connections/conversations`, method: "GET" },
      options
    );
  };
  /**
   * Get connection statistics for the authenticated user
   */
  const getConnectionStats = (
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetConnectionStats200>(
      { url: `/connections/stats`, method: "GET" },
      options
    );
  };
  /**
   * Get chat users for the authenticated user - formatted for chat interface
   */
  const getChatUsers = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<GetChatUsers200>(
      { url: `/connections/chat-users`, method: "GET" },
      options
    );
  };
  /**
   * Get all connections for the authenticated user
   */
  const getMyConnections = (
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetMyConnections200>(
      { url: `/connections/my-connections`, method: "GET" },
      options
    );
  };
  /**
   * Get older messages for infinite scroll
   */
  const getOlderMessages = (
    conversationId: string,
    params?: GetOlderMessagesParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetOlderMessages200>(
      {
        url: `/connections/messages/${conversationId}/older`,
        method: "GET",
        params
      },
      options
    );
  };
  return {
    createConnection,
    getConnectionByConversation,
    sendMessage,
    getMessages,
    markMessagesAsRead,
    getConversations,
    getConnectionStats,
    getChatUsers,
    getMyConnections,
    getOlderMessages
  };
};
export type CreateConnectionResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnections>["createConnection"]>>
>;
export type GetConnectionByConversationResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getConnections>["getConnectionByConversation"]>
  >
>;
export type SendMessageResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnections>["sendMessage"]>>
>;
export type GetMessagesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnections>["getMessages"]>>
>;
export type MarkMessagesAsReadResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnections>["markMessagesAsRead"]>>
>;
export type GetConversationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnections>["getConversations"]>>
>;
export type GetConnectionStatsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnections>["getConnectionStats"]>>
>;
export type GetChatUsersResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnections>["getChatUsers"]>>
>;
export type GetMyConnectionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnections>["getMyConnections"]>>
>;
export type GetOlderMessagesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnections>["getOlderMessages"]>>
>;
