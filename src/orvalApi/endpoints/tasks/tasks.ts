/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateTaskDto,
  GetTask200,
  GetTasksForProject200,
  GetTasksForProjectParams,
  TaskDto,
  UpdateTaskDto
} from "../../model";

import { customInstance } from "../../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getTasks = () => {
  const createTask = (
    createTaskDto: CreateTaskDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<TaskDto>(
      {
        url: `/tasks`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createTaskDto
      },
      options
    );
  };
  const getTasksForProject = (
    projectId: string,
    params?: GetTasksForProjectParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetTasksForProject200>(
      { url: `/tasks/project/${projectId}`, method: "GET", params },
      options
    );
  };
  const getTask = (
    taskId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetTask200>(
      { url: `/tasks/${taskId}`, method: "GET" },
      options
    );
  };
  const updateTask = (
    taskId: string,
    updateTaskDto: UpdateTaskDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<TaskDto>(
      {
        url: `/tasks/${taskId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateTaskDto
      },
      options
    );
  };
  const deleteTask = (
    taskId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/tasks/${taskId}`, method: "DELETE" },
      options
    );
  };
  return { createTask, getTasksForProject, getTask, updateTask, deleteTask };
};
export type CreateTaskResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getTasks>["createTask"]>>
>;
export type GetTasksForProjectResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getTasks>["getTasksForProject"]>>
>;
export type GetTaskResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getTasks>["getTask"]>>
>;
export type UpdateTaskResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getTasks>["updateTask"]>>
>;
export type DeleteTaskResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getTasks>["deleteTask"]>>
>;
