/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateFeedbackInputDto,
  FeedbackDto,
  GetFeedback200,
  GetFeedbacksForProjectParams,
  PaginatedResultFeedbackDto,
  UpdateFeedbackDto
} from "../../model";

import { customInstance } from "../../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getFeedbacks = () => {
  const createFeedback = (
    projectId: string,
    createFeedbackInputDto: CreateFeedbackInputDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FeedbackDto[]>(
      {
        url: `/projects/${projectId}/feedbacks`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createFeedbackInputDto
      },
      options
    );
  };
  const getFeedbacksForProject = (
    projectId: string,
    params?: GetFeedbacksForProjectParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaginatedResultFeedbackDto>(
      { url: `/projects/${projectId}/feedbacks`, method: "GET", params },
      options
    );
  };
  const getFeedback = (
    projectId: string,
    feedbackId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetFeedback200>(
      { url: `/projects/${projectId}/feedbacks/${feedbackId}`, method: "GET" },
      options
    );
  };
  const updateFeedback = (
    projectId: string,
    feedbackId: string,
    updateFeedbackDto: UpdateFeedbackDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FeedbackDto>(
      {
        url: `/projects/${projectId}/feedbacks/${feedbackId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateFeedbackDto
      },
      options
    );
  };
  const deleteFeedback = (
    projectId: string,
    feedbackId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      {
        url: `/projects/${projectId}/feedbacks/${feedbackId}`,
        method: "DELETE"
      },
      options
    );
  };
  return {
    createFeedback,
    getFeedbacksForProject,
    getFeedback,
    updateFeedback,
    deleteFeedback
  };
};
export type CreateFeedbackResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFeedbacks>["createFeedback"]>>
>;
export type GetFeedbacksForProjectResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFeedbacks>["getFeedbacksForProject"]>>
>;
export type GetFeedbackResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFeedbacks>["getFeedback"]>>
>;
export type UpdateFeedbackResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFeedbacks>["updateFeedback"]>>
>;
export type DeleteFeedbackResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFeedbacks>["deleteFeedback"]>>
>;
