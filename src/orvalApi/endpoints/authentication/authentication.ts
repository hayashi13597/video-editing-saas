/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0.0
 */
import type {
  AuthResponseDto,
  ChangePasswordDto,
  ChangePasswordResponseDto,
  ConfirmForgotPasswordDto,
  ConfirmForgotPasswordResponseDto,
  ConfirmSignUpDto,
  ConfirmSignUpResponseDto,
  CurrentUserResponseDto,
  ForgotPasswordDto,
  ForgotPasswordResponseDto,
  GoogleCallbackResponseDto,
  HandleGoogleSignInCallbackParams,
  RefreshTokenDto,
  RefreshTokenResponseDto,
  ResendConfirmationDto,
  ResendConfirmationResponseDto,
  SignInDto,
  SignOutResponseDto,
  SignUpDto,
  SignUpResponseDto
} from "../../model";

import { customInstance } from "../../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAuthentication = () => {
  const signUp = (
    signUpDto: SignUpDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SignUpResponseDto>(
      {
        url: `/auth/signup`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: signUpDto
      },
      options
    );
  };
  const confirmSignUp = (
    confirmSignUpDto: ConfirmSignUpDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ConfirmSignUpResponseDto>(
      {
        url: `/auth/confirm-signup`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: confirmSignUpDto
      },
      options
    );
  };
  const signIn = (
    signInDto: SignInDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<AuthResponseDto>(
      {
        url: `/auth/signin`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: signInDto
      },
      options
    );
  };
  const redirectToGoogleSignIn = (
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/auth/google`, method: "GET" },
      options
    );
  };
  const handleGoogleSignInCallback = (
    params: HandleGoogleSignInCallbackParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GoogleCallbackResponseDto>(
      { url: `/auth/google/callback`, method: "GET", params },
      options
    );
  };
  const refreshToken = (
    refreshTokenDto: RefreshTokenDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<RefreshTokenResponseDto>(
      {
        url: `/auth/refresh-token`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: refreshTokenDto
      },
      options
    );
  };
  const forgotPassword = (
    forgotPasswordDto: ForgotPasswordDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ForgotPasswordResponseDto>(
      {
        url: `/auth/forgot-password`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: forgotPasswordDto
      },
      options
    );
  };
  const confirmForgotPassword = (
    confirmForgotPasswordDto: ConfirmForgotPasswordDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ConfirmForgotPasswordResponseDto>(
      {
        url: `/auth/confirm-forgot-password`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: confirmForgotPasswordDto
      },
      options
    );
  };
  const changePassword = (
    changePasswordDto: ChangePasswordDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ChangePasswordResponseDto>(
      {
        url: `/auth/change-password`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: changePasswordDto
      },
      options
    );
  };
  const signOut = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<SignOutResponseDto>(
      { url: `/auth/signout`, method: "POST" },
      options
    );
  };
  const resendConfirmation = (
    resendConfirmationDto: ResendConfirmationDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ResendConfirmationResponseDto>(
      {
        url: `/auth/resend-confirmation`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: resendConfirmationDto
      },
      options
    );
  };
  const getCurrentUser = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<CurrentUserResponseDto>(
      { url: `/auth/me`, method: "GET" },
      options
    );
  };
  return {
    signUp,
    confirmSignUp,
    signIn,
    redirectToGoogleSignIn,
    handleGoogleSignInCallback,
    refreshToken,
    forgotPassword,
    confirmForgotPassword,
    changePassword,
    signOut,
    resendConfirmation,
    getCurrentUser
  };
};
export type SignUpResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["signUp"]>>
>;
export type ConfirmSignUpResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["confirmSignUp"]>>
>;
export type SignInResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["signIn"]>>
>;
export type RedirectToGoogleSignInResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getAuthentication>["redirectToGoogleSignIn"]>
  >
>;
export type HandleGoogleSignInCallbackResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getAuthentication>["handleGoogleSignInCallback"]
    >
  >
>;
export type RefreshTokenResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["refreshToken"]>>
>;
export type ForgotPasswordResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["forgotPassword"]>>
>;
export type ConfirmForgotPasswordResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getAuthentication>["confirmForgotPassword"]>
  >
>;
export type ChangePasswordResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["changePassword"]>>
>;
export type SignOutResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["signOut"]>>
>;
export type ResendConfirmationResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getAuthentication>["resendConfirmation"]>
  >
>;
export type GetCurrentUserResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuthentication>["getCurrentUser"]>>
>;
