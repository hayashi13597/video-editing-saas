/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0.0
 */
import type {
  GetMyNotifications200,
  GetMyNotificationsParams,
  MarkAllAsRead200,
  NotificationDto
} from "../../model";

import { customInstance } from "../../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getNotifications = () => {
  const getMyNotifications = (
    params?: GetMyNotificationsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetMyNotifications200>(
      { url: `/notifications`, method: "GET", params },
      options
    );
  };
  const markAsRead = (
    notificationId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<NotificationDto>(
      { url: `/notifications/${notificationId}/read`, method: "PUT" },
      options
    );
  };
  const markAllAsRead = (options?: SecondParameter<typeof customInstance>) => {
    return customInstance<MarkAllAsRead200>(
      { url: `/notifications/read-all`, method: "PUT" },
      options
    );
  };
  const deleteNotification = (
    notificationId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/notifications/${notificationId}`, method: "DELETE" },
      options
    );
  };
  return { getMyNotifications, markAsRead, markAllAsRead, deleteNotification };
};
export type GetMyNotificationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNotifications>["getMyNotifications"]>>
>;
export type MarkAsReadResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNotifications>["markAsRead"]>>
>;
export type MarkAllAsReadResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNotifications>["markAllAsRead"]>>
>;
export type DeleteNotificationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNotifications>["deleteNotification"]>>
>;
