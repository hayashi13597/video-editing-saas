/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0.0
 */
import type {
  FileDto,
  GetFileById200,
  GetFileInfoForDownload200,
  ListFilesByProjectId200,
  ListFilesByProjectIdParams,
  UpdateFileDto,
  UploadFileBody
} from "../../model";

import { customInstance } from "../../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getFiles = () => {
  const uploadFile = (
    projectId: string,
    uploadFileBody: UploadFileBody,
    options?: SecondParameter<typeof customInstance>
  ) => {
    const formData = new FormData();
    formData.append(`file`, uploadFileBody.file);
    if (uploadFileBody.purpose !== undefined) {
      formData.append(`purpose`, uploadFileBody.purpose);
    }
    if (uploadFileBody.description !== undefined) {
      formData.append(`description`, uploadFileBody.description);
    }

    return customInstance<FileDto>(
      {
        url: `/projects/${projectId}/files/upload`,
        method: "POST",
        headers: { "Content-Type": "multipart/form-data" },
        data: formData
      },
      options
    );
  };
  const getFileById = (
    projectId: string,
    fileId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetFileById200>(
      { url: `/projects/${projectId}/files/${fileId}`, method: "GET" },
      options
    );
  };
  const updateFile = (
    projectId: string,
    fileId: string,
    updateFileDto: UpdateFileDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<FileDto>(
      {
        url: `/projects/${projectId}/files/${fileId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateFileDto
      },
      options
    );
  };
  const deleteFile = (
    projectId: string,
    fileId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/projects/${projectId}/files/${fileId}`, method: "DELETE" },
      options
    );
  };
  const listFilesByProjectId = (
    projectId: string,
    params?: ListFilesByProjectIdParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ListFilesByProjectId200>(
      { url: `/projects/${projectId}/files`, method: "GET", params },
      options
    );
  };
  const getFileInfoForDownload = (
    projectId: string,
    fileId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetFileInfoForDownload200>(
      { url: `/projects/${projectId}/files/${fileId}/download`, method: "GET" },
      options
    );
  };
  return {
    uploadFile,
    getFileById,
    updateFile,
    deleteFile,
    listFilesByProjectId,
    getFileInfoForDownload
  };
};
export type UploadFileResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFiles>["uploadFile"]>>
>;
export type GetFileByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFiles>["getFileById"]>>
>;
export type UpdateFileResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFiles>["updateFile"]>>
>;
export type DeleteFileResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFiles>["deleteFile"]>>
>;
export type ListFilesByProjectIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFiles>["listFilesByProjectId"]>>
>;
export type GetFileInfoForDownloadResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getFiles>["getFileInfoForDownload"]>>
>;
