/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateUserByAdminBody,
  GetMyProjectsParams,
  GetUserProjectsParams,
  GetUsersParams,
  PaginatedResultProjectDto,
  PaginatedResultUserResponseDto,
  UpdateUserPointsBody,
  UserCreateDto,
  UserUpdateDto
} from "../../model";

import { customInstance } from "../../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getUsers = () => {
  const getUsers = (
    params?: GetUsersParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaginatedResultUserResponseDto>(
      { url: `/users`, method: "GET", params },
      options
    );
  };
  const createUserByAdmin = (
    createUserByAdminBody: CreateUserByAdminBody,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<unknown>(
      {
        url: `/users`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createUserByAdminBody
      },
      options
    );
  };
  const getUserById = (
    userId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<unknown>(
      { url: `/users/${userId}`, method: "GET" },
      options
    );
  };
  const updateUser = (
    userId: string,
    userUpdateDto: UserUpdateDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<unknown>(
      {
        url: `/users/${userId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: userUpdateDto
      },
      options
    );
  };
  const deleteUser = (
    userId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/users/${userId}`, method: "DELETE" },
      options
    );
  };
  /**
 * Get all projects associated with the currently logged-in user.
Can be filtered by status.
 */
  const getMyProjects = (
    params?: GetMyProjectsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaginatedResultProjectDto>(
      { url: `/users/me/projects`, method: "GET", params },
      options
    );
  };
  /**
 * Get projects associated with a specific user ID.
Access control applies based on roles and project status.
 */
  const getUserProjects = (
    userId: string,
    params?: GetUserProjectsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaginatedResultProjectDto>(
      { url: `/users/${userId}/projects`, method: "GET", params },
      options
    );
  };
  /**
   * Update user points
   */
  const updateUserPoints = (
    userId: string,
    updateUserPointsBody: UpdateUserPointsBody,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<UserCreateDto>(
      {
        url: `/users/${userId}/points`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateUserPointsBody
      },
      options
    );
  };
  return {
    getUsers,
    createUserByAdmin,
    getUserById,
    updateUser,
    deleteUser,
    getMyProjects,
    getUserProjects,
    updateUserPoints
  };
};
export type GetUsersResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["getUsers"]>>
>;
export type CreateUserByAdminResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["createUserByAdmin"]>>
>;
export type GetUserByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["getUserById"]>>
>;
export type UpdateUserResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["updateUser"]>>
>;
export type DeleteUserResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["deleteUser"]>>
>;
export type GetMyProjectsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["getMyProjects"]>>
>;
export type GetUserProjectsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["getUserProjects"]>>
>;
export type UpdateUserPointsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getUsers>["updateUserPoints"]>>
>;
