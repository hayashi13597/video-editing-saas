/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateProjectDto,
  CreateSubmissionDto,
  GetNewArrivalsCount200,
  ListProjectsParams,
  PaginatedResultProjectDto,
  ProjectDto,
  SubmissionDto,
  UpdateProjectDto
} from "../../model";

import { customInstance } from "../../../lib/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getProjects = () => {
  /**
   * Allows a freelancer to accept an open project.
   */
  const acceptProject = (
    projectId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ProjectDto>(
      { url: `/projects/${projectId}/accept`, method: "POST" },
      options
    );
  };
  /**
   * Create a new submission for a project
   */
  const createSubmission = (
    projectId: string,
    createSubmissionDto: CreateSubmissionDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<SubmissionDto>(
      {
        url: `/projects/${projectId}/submission`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createSubmissionDto
      },
      options
    );
  };
  const createProject = (
    createProjectDto: CreateProjectDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ProjectDto>(
      {
        url: `/projects`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: createProjectDto
      },
      options
    );
  };
  const listProjects = (
    params?: ListProjectsParams,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<PaginatedResultProjectDto>(
      { url: `/projects`, method: "GET", params },
      options
    );
  };
  const getProjectById = (
    projectId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ProjectDto>(
      { url: `/projects/${projectId}`, method: "GET" },
      options
    );
  };
  const updateProject = (
    projectId: string,
    updateProjectDto: UpdateProjectDto,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ProjectDto>(
      {
        url: `/projects/${projectId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: updateProjectDto
      },
      options
    );
  };
  const deleteProject = (
    projectId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<void>(
      { url: `/projects/${projectId}`, method: "DELETE" },
      options
    );
  };
  /**
   * Assign a freelancer to a project.
   */
  const assignFreelancer = (
    projectId: string,
    freelancerId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ProjectDto>(
      { url: `/projects/${projectId}/assign/${freelancerId}`, method: "POST" },
      options
    );
  };
  const getNewArrivalsCount = (
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<GetNewArrivalsCount200>(
      { url: `/projects/new-arrivals/count`, method: "GET" },
      options
    );
  };
  const completeProject = (
    projectId: string,
    options?: SecondParameter<typeof customInstance>
  ) => {
    return customInstance<ProjectDto>(
      { url: `/projects/${projectId}/complete`, method: "PUT" },
      options
    );
  };
  return {
    acceptProject,
    createSubmission,
    createProject,
    listProjects,
    getProjectById,
    updateProject,
    deleteProject,
    assignFreelancer,
    getNewArrivalsCount,
    completeProject
  };
};
export type AcceptProjectResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["acceptProject"]>>
>;
export type CreateSubmissionResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["createSubmission"]>>
>;
export type CreateProjectResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["createProject"]>>
>;
export type ListProjectsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["listProjects"]>>
>;
export type GetProjectByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["getProjectById"]>>
>;
export type UpdateProjectResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["updateProject"]>>
>;
export type DeleteProjectResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["deleteProject"]>>
>;
export type AssignFreelancerResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["assignFreelancer"]>>
>;
export type GetNewArrivalsCountResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["getNewArrivalsCount"]>>
>;
export type CompleteProjectResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getProjects>["completeProject"]>>
>;
